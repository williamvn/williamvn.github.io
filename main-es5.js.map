{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/dialog/dialog.component.ts","webpack:///src/app/dialog/dialog.component.html","webpack:///src/app/error/error.component.ts","webpack:///src/app/error/error.component.html","webpack:///src/app/footer/footer.component.ts","webpack:///src/app/footer/footer.component.html","webpack:///src/app/forms/address-form/address-form.component.ts","webpack:///src/app/forms/address-form/address-form.component.html","webpack:///src/app/forms/patient-form/patient-form.component.ts","webpack:///src/app/forms/patient-form/patient-form.component.html","webpack:///src/app/forms/personal-info-form/personal-info-form.component.ts","webpack:///src/app/forms/personal-info-form/personal-info-form.component.html","webpack:///src/app/forms/professional-form/professional-form.component.ts","webpack:///src/app/forms/professional-form/professional-form.component.html","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/material/material.module.ts","webpack:///src/app/model/Address.ts","webpack:///src/app/model/app-user.ts","webpack:///src/app/model/patient.ts","webpack:///src/app/model/professional.ts","webpack:///src/app/model/user.ts","webpack:///src/app/new-user/new-user.component.ts","webpack:///src/app/new-user/new-user.component.html","webpack:///src/app/not-found/not-found.component.ts","webpack:///src/app/not-found/not-found.component.html","webpack:///src/app/query-validator.directive.ts","webpack:///src/app/services/app-user.service.ts","webpack:///src/app/services/forms.service.ts","webpack:///src/app/services/user.service.ts","webpack:///src/app/top-bar/top-bar.component.ts","webpack:///src/app/top-bar/top-bar.component.html","webpack:///src/app/user-details/user-details.component.ts","webpack:///src/app/user-details/user-details.component.html","webpack:///src/app/users-list/users-list.component.ts","webpack:///src/app/users-list/users-list.component.html","webpack:///src/app/users/users.component.ts","webpack:///src/app/users/users.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","DialogComponent","dialogRef","data","close","onNoClick","onClick","ErrorComponent","router","navigate","redirectToHome","FooterComponent","AddressFormComponent","formService","isEditable","cities","loadCities","subscribe","filteredOptions","addressFormGroup","get","valueChanges","pipe","value","filter","filterValue","toLowerCase","option","indexOf","event","allowOnlyNumbers","onzipCodeInput","PatientFormComponent","_snackBar","formbuilder","insuranceCarriers","insuranceForms","insuranceFormsNames","insuranceId","createInsuranceControls","i","length","form","group","name","type","cardNumber","push","patientForm","addControl","index","findIndex","splice","removeControl","snackBarRef","open","duration","onAction","PersonalInfoFormComponent","ProfessionalFormComponent","LoginComponent","appUserService","userService","errorMessage","user","LogUser","success","beforeRoute","currentRoute","error","status","logUser","MaterialModule","Address","AppUser","Patient","Professional","User","NewUserComponent","route","breakpointObserver","isTypeSelected","isHandset$","observe","Handset","result","matches","url","loginRequired","paramMap","params","userType","addr","isProfessional","address","createProfessionalForm","createPatientForm","loadForms","personalInfoForm","addressForm","professionalForm","getUser","addNewUser","NotFoundComponent","FILTERS","QueryValidatorDirective","control","query","filters","split","field","find","s","message","provide","useExisting","multi","AppUserService","http","BASE_URI","_tokenSubject","_token","asObservable","appUser","post","response","next","access_token","providedIn","FormsService","createUserForm","createAddressForm","noCollegiate","required","NHC","lastName","secondLastName","documentationId","docValidation","birthDay","gender","street","door","no","city","noSpecialChars","zipCode","pattern","res","mapFormToUser","getInsuranceCarriers","insurancesKeys","Object","getRawValue","forEach","key","property","assign","c","PASSPORT","RegExp","DNI","NIE","test","validate","valid","REGEXP","keyCode","preventDefault","UserService","TOKEN","_professionals","_patients","token","loadPatients","loadProfessionals","headers","set","resource","put","_id","pro","map","deleteUser","sendProfessionalQuery","sendPatientQuery","TopBarComponent","UserDetailsComponent","loading","segments","undefined","loadUser","professionals","getUserbyId","patients","patient","getUserById","userForm","personalInfo","updateUser","UsersListComponent","dialog","users","reload","dataSource","changes","sort","paginator","width","subtitle","body","reject","accept","afterClosed","emit","UsersComponent","loadUsers","loadCollections","alert","deleteAllDoctors","sendQuery","_professionalsBackup","professional","includes","_patientsBackup","concat","deleteDoctors","environment","production","bootstrapModule","err","console"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { UsersComponent } from './users/users.component';\r\nimport { UserDetailsComponent } from './user-details/user-details.component';\r\nimport { NewUserComponent } from './new-user/new-user.component';\r\nimport { NotFoundComponent } from './not-found/not-found.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { ErrorComponent } from './error/error.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  { path: \"\", component: LoginComponent },\r\n  { path: \"users\", component: UsersComponent },\r\n  { path: \"error\", component: ErrorComponent },\r\n  { path: \"not-found\", component: NotFoundComponent },\r\n  { path: \"user/new\", component: NewUserComponent },\r\n  { path: \"user/edit/:userType/:id\", component: UserDetailsComponent },\r\n  { path: \"user/new/:userType\", component: NewUserComponent },\r\n  { path: \"user/:userType/:id\", component: UserDetailsComponent },\r\n  { path: \"**\", component: NotFoundComponent }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'UserManagement';\n}\n","<app-top-bar></app-top-bar>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { TopBarComponent } from './top-bar/top-bar.component';\r\nimport { UsersListComponent } from './users-list/users-list.component';\r\nimport { UsersComponent } from './users/users.component';\r\nimport { MaterialModule } from './material/material.module';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { UserDetailsComponent } from './user-details/user-details.component';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { NewUserComponent } from './new-user/new-user.component';\r\nimport { DialogComponent } from './dialog/dialog.component';\r\nimport { PersonalInfoFormComponent } from './forms/personal-info-form/personal-info-form.component';\r\nimport { AddressFormComponent } from './forms/address-form/address-form.component';\r\nimport { ProfessionalFormComponent } from './forms/professional-form/professional-form.component';\r\nimport { PatientFormComponent } from './forms/patient-form/patient-form.component';\r\nimport { QueryValidatorDirective } from './query-validator.directive';\r\nimport { NotFoundComponent } from './not-found/not-found.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { ErrorComponent } from './error/error.component';\r\nimport { FooterComponent } from './footer/footer.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    TopBarComponent,\r\n    UsersListComponent,\r\n    UsersComponent,\r\n    UserDetailsComponent,\r\n    NewUserComponent,\r\n    DialogComponent,\r\n    PersonalInfoFormComponent,\r\n    AddressFormComponent,\r\n    ProfessionalFormComponent,\r\n    PatientFormComponent,\r\n    QueryValidatorDirective,\r\n    NotFoundComponent,\r\n    LoginComponent,\r\n    ErrorComponent,\r\n    FooterComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    MaterialModule,\r\n    HttpClientModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatSelectModule,\r\n    MatRadioModule,\r\n    MatCardModule,\r\n    ReactiveFormsModule,\r\n    FormsModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogData } from './dialog-data.interface';\n\n@Component({\n  selector: 'app-dialog',\n  styleUrls: ['./dialog.component.scss'],\n  templateUrl: './dialog.component.html',\n})\nexport class DialogComponent {\n\n  constructor(public dialogRef: MatDialogRef<any>,  @Inject(MAT_DIALOG_DATA) public data: DialogData) { }\n\n  onNoClick(): void {\n    this.dialogRef.close(false);\n  }\n\n  onClick(): void {\n    this.dialogRef.close(true);\n  }\n}\n","<div class=\"dialog\">\n    <h1 mat-dialog-title>{{data.title}}</h1>\n    <h3 mat-dialog-title>{{data.subtitle}}</h3>\n    <div mat-dialog-content>\n        <p>{{data.body}}</p>\n    </div>\n    <div mat-dialog-actions>\n        <button mat-button class=\"basic\" (click)=\"onNoClick()\">{{data.reject}}</button>\n        <button mat-raised-button class=\"warn\" (click)=\"onClick()\">{{data.accept}}</button>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-error',\r\n  templateUrl: './error.component.html',\r\n  styleUrls: ['./error.component.scss']\r\n})\r\nexport class ErrorComponent implements OnInit {\r\n\r\n  constructor(private router:Router) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  redirectToHome(){\r\n    this.router.navigate([\"users\"]);\r\n  }\r\n}\r\n","<div class=\"container\">\r\n    <div class=\"page-body\">\r\n        <div class=\"mat-display-4\"><strong>500</strong></div>\r\n        <div class=\"mat-display-1\"> Error Interno </div>\r\n        <p> Ooops! Lo sentimos mucho, ha ocurrido un error.</p>\r\n        <img src=\"../../assets/img/internalError.jpg\" width=\"100%\">\r\n        <button mat-stroked-button (click)=\"redirectToHome()\">Ir a Home</button>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.scss']\n})\nexport class FooterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"footer\">\n    <div class=\"options\">\n        <div> <i class=\"fa fa-globe\" aria-hidden=\"true\"></i> Español</div>\n        <div class=\"row\">\n            <mat-icon>wb_sunny</mat-icon> <div class=\"ml-1\">Tema</div>\n        </div>\n    </div>\n    <div class=\"property\">\n        <div>@William Vázquez Noguerol</div>\n        <div>GeekHubs Academy + FutuRS</div>\n        <a class=\"text-center\" mat-stroked-button href=\"mailto:williamvn1995@gmail.com\">Contact</a>\n    </div>\n</div>\n","import { Component, OnInit, Input, DoCheck } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { FormsService } from 'src/app/services/forms.service';\r\nimport { Observable } from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-address-form',\r\n  templateUrl: './address-form.component.html',\r\n  styleUrls: ['./address-form.component.scss' ,'../forms.component.scss'],\r\n  providers:[FormsService]\r\n})\r\nexport class AddressFormComponent implements OnInit {\r\n\r\n  @Input() isEditable: boolean = true;\r\n  @Input() addressFormGroup: FormGroup;\r\n  cities:string[] = [];\r\n  filteredOptions: Observable<string[]>;\r\n  constructor(private formService: FormsService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.formService.loadCities().subscribe((cities) => {\r\n      this.cities = cities;\r\n    });\r\n    this.filteredOptions = this.addressFormGroup.get(\"city\").valueChanges.pipe(\r\n      startWith(''),\r\n      map(value => this.filter(value))\r\n    );\r\n  }\r\n\r\n  private filter(value: string): string[] {\r\n    const filterValue = value.toLowerCase();\r\n    return this.cities.filter(option => option.toLowerCase().indexOf(filterValue) === 0);\r\n  }\r\n\r\n  onzipCodeInput(event:KeyboardEvent):void{\r\n    this.formService.allowOnlyNumbers(event);\r\n  }\r\n\r\n}\r\n","<form [formGroup]=\"addressFormGroup\" novalidate>\r\n    <div class=\"row\">\r\n        <div class=\"col\">\r\n            <mat-form-field class=\"full-width\">\r\n                <input matInput placeholder=\"Calle\" formControlName=\"street\" name=\"street\" [readonly]=\"!isEditable\">\r\n            </mat-form-field>\r\n        </div>\r\n    </div>\r\n    <div class=\"row\">\r\n\r\n        <div class=\"col\">\r\n            <mat-form-field class=\"full-width\">\r\n                <input matInput placeholder=\"Puerta\" formControlName=\"door\" name=\"puerta\" [readonly]=\"!isEditable\">\r\n            </mat-form-field>\r\n        </div>\r\n\r\n        <div class=\"col\">\r\n            <mat-form-field class=\"full-width\">\r\n                <input matInput placeholder=\"No\" formControlName=\"no\" name=\"no\" [readonly]=\"!isEditable\">\r\n\r\n            </mat-form-field>\r\n        </div>\r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"col\">\r\n            <mat-form-field class=\"full-width\">\r\n                <input matInput placeholder=\"Ciudad\" formControlName=\"city\" name=\"city\" [readonly]=\"!isEditable\"\r\n                    [matAutocomplete]=\"auto\">\r\n\r\n                <mat-error *ngIf=\"addressFormGroup.controls['city'].errors\">\r\n                    El nombre de la ciudad no puede contener caracteres especiales\r\n                </mat-error>\r\n                <mat-autocomplete autoActiveFirstOption #auto=\"matAutocomplete\">\r\n                    <mat-option *ngFor=\"let option of filteredOptions | async\" [value]=\"option\">\r\n                        {{option}}\r\n                    </mat-option>\r\n                </mat-autocomplete>\r\n            </mat-form-field>\r\n        </div>\r\n\r\n        <div class=\"col\">\r\n            <mat-form-field class=\"full-width\">\r\n                <input matInput #zipCode placeholder=\"Código Postal\" formControlName=\"zipCode\"\r\n                    name=\"zipcode\" [readonly]=\"!isEditable\" (keydown)=\"onzipCodeInput($event)\">\r\n                <mat-error *ngIf=\"addressFormGroup.controls['zipCode'].errors\">\r\n                    El codigo Postal debe tener <strong>5</strong> números.\r\n                </mat-error>\r\n                <mat-hint align=\"end\">{{zipCode.value.length}} / 5</mat-hint>\r\n            </mat-form-field>\r\n        </div>\r\n\r\n    </div>\r\n</form>","import { Component, OnInit, Input } from '@angular/core';\r\nimport { FormGroup, FormControl, FormBuilder } from '@angular/forms';\r\nimport { InsuranceCarrier } from '../../model/insurance-carrier';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\n\r\n@Component({\r\n  selector: 'app-patient-form',\r\n  templateUrl: './patient-form.component.html',\r\n  styleUrls: ['./patient-form.component.scss','../forms.component.scss']\r\n})\r\nexport class PatientFormComponent implements OnInit {\r\n\r\n  @Input() isEditable:boolean = true;\r\n  @Input() patientForm:FormGroup;\r\n  @Input() insuranceCarriers:InsuranceCarrier[] = [];\r\n  insuranceForms: FormGroup[] = [];\r\n  insuranceFormsNames:string[] = [];\r\n  insuranceId:number = 0;\r\n  constructor(private _snackBar: MatSnackBar, private formbuilder: FormBuilder) { }\r\n\r\n  ngOnInit(): void {\r\n    this.createInsuranceControls();\r\n  }\r\n\r\n  private createInsuranceControls(){\r\n    for (let i = 0; i < this.insuranceCarriers.length; i++) {\r\n      var form: FormGroup = this.formbuilder.group({\r\n        name: this.insuranceCarriers[i].name,\r\n        type: this.insuranceCarriers[i].type,\r\n        cardNumber: this.insuranceCarriers[i].cardNumber\r\n      });\r\n      this.insuranceForms.push(form);\r\n      this.patientForm.addControl(\"insurance\" + this.insuranceId, form);\r\n      this.insuranceFormsNames.push(\"insurance\" + this.insuranceId);\r\n      this.insuranceId += 1\r\n    }\r\n  }\r\n\r\n  addInsurance() {\r\n    var form: FormGroup = this.formbuilder.group({\r\n      name: \"\",\r\n      type: \"\",\r\n      cardNumber: \"\"\r\n    });\r\n    this.insuranceForms.push(form);\r\n    this.patientForm.addControl(\"insurance\" + this.insuranceId, form);\r\n    this.insuranceFormsNames.push(\"insurance\" + this.insuranceId);\r\n    this.insuranceId += 1;\r\n  }\r\n\r\n  deleteInsurance(form:FormGroup) {\r\n    var index = this.insuranceForms.findIndex( i => i === form); \r\n\r\n    this.insuranceForms.splice(index, 1);\r\n    var name = this.insuranceFormsNames[index];\r\n    this.insuranceFormsNames.splice(index, 1);\r\n\r\n    this.patientForm.removeControl(name);\r\n\r\n    var snackBarRef = this._snackBar.open(\"Seguro Eliminado\", \"UNDO\", {\r\n      duration: 5000,\r\n    });\r\n\r\n    snackBarRef.onAction().subscribe(() => {\r\n      this.insuranceForms.splice(index, 0, form);\r\n      this.insuranceFormsNames.splice(index, 0, name);\r\n      this.patientForm.addControl(name, form);\r\n    });\r\n  }\r\n}\r\n","<form [formGroup]=\"patientForm\">\r\n    <div class=\"row\">\r\n        <div class=\"col\">\r\n            <mat-form-field class=\"full-width\">\r\n                <input matInput placeholder=\"NHC\" formControlName='NHC' name=\"NHC\" [readonly]=\"!isEditable\">\r\n                <mat-error *ngIf=\"patientForm.controls['NHC'].hasError('required')\">\r\n                    Por favor introduzca el <strong>NHC</strong>\r\n                </mat-error>\r\n            </mat-form-field>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"row insurance-container row-reverse\" *ngFor=\"let form of insuranceForms;let i = index;\">\r\n        <form class=\"row insurance\" [formGroup]=\"form\">\r\n            <mat-form-field>\r\n                <input matInput placeholder=\"Nombre del Seguro\" formControlName=\"name\" [readonly]=\"!isEditable\">\r\n            </mat-form-field>\r\n            <mat-form-field>\r\n                <mat-select matInput placeholder=\"Tipo de Seguro\" formControlName=\"type\" [disabled]=\"!isEditable\">\r\n                    <mat-option value=\"Salud\">Salud</mat-option>\r\n                    <mat-option value=\"Familiar\">Familiar</mat-option>\r\n                    <mat-option value=\"Dental\">Dental</mat-option>\r\n                </mat-select>\r\n            </mat-form-field>\r\n            <mat-form-field>\r\n                <input matInput placeholder=\"Numero de Tarjeta\" formControlName=\"cardNumber\" [readonly]=\"!isEditable\">\r\n            </mat-form-field>\r\n        </form>\r\n        <button mat-mini-fab color=\"basic\" type=\"button\" class=\"close\" (click)=\"deleteInsurance(form)\"\r\n            *ngIf=\"isEditable\">\r\n            x\r\n        </button>\r\n    </div>\r\n    <button mat-mini-fab color=\"basic\" type=\"button\" (click)=\"addInsurance()\" *ngIf=\"isEditable\">\r\n        <mat-icon>add</mat-icon>\r\n    </button>\r\n</form>","import { Component, OnInit, Input } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-personal-info-form',\r\n  templateUrl: './personal-info-form.component.html',\r\n  styleUrls: ['./personal-info-form.component.scss','../forms.component.scss']\r\n})\r\nexport class PersonalInfoFormComponent implements OnInit {\r\n\r\n  @Input() isEditable:boolean = true;\r\n  @Input() personalInfoForm:FormGroup;\r\n  constructor() {\r\n   }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<form [formGroup]=\"personalInfoForm\">\r\n    <div class=\"row\">\r\n        <div class=\"col\">\r\n            <mat-form-field class=\"full-width\">\r\n                <input matInput placeholder=\"Nombre\" formControlName=\"name\" name=\"Name\" [readonly]=\"!isEditable\">\r\n                <mat-error *ngIf=\"personalInfoForm.controls['name'].hasError('required')\">\r\n                    El Nombre es <strong>obligatorio</strong>\r\n                </mat-error>\r\n            </mat-form-field>\r\n        </div>\r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"col\">\r\n            <mat-form-field class=\"full-width\">\r\n                <input matInput placeholder=\"Apellido\" formControlName=\"lastName\" name=\"lastName\"\r\n                    [readonly]=\"!isEditable\">\r\n                <mat-error *ngIf=\"personalInfoForm.controls['lastName'].hasError('required')\">\r\n                    El primer apellido es <strong>obligatorio</strong>\r\n                </mat-error>\r\n            </mat-form-field>\r\n        </div>\r\n        <div class=\"col\">\r\n            <mat-form-field class=\"full-width\">\r\n                <input matInput placeholder=\"Segundo Apellido\" formControlName=\"secondLastName\" name=\"secondLastName\"\r\n                    [readonly]=\"!isEditable\">\r\n            </mat-form-field>\r\n        </div>\r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"col\">\r\n            <mat-form-field class=\"full-width\">\r\n                <input matInput placeholder=\"DNI/Pasaporte\" formControlName=\"documentationId\" name=\"docID\"\r\n                    [readonly]=\"!isEditable\">\r\n                <mat-error *ngIf=\"personalInfoForm.controls['documentationId'].errors\">\r\n                    DNI or Pasaporte no válido\r\n                </mat-error>\r\n            </mat-form-field>\r\n        </div>\r\n        <div class=\"col\">\r\n            <mat-form-field class=\"full-width\">\r\n                <mat-label>Fecha de Nacimiento</mat-label>\r\n                <input matInput [matDatepicker]=\"picker\" formControlName=\"birthDay\" name=\"birthDay\"\r\n                    [readonly]=\"!isEditable\">\r\n                <mat-datepicker-toggle class=\"large\" matSuffix [for]=\"picker\" [disabled]=\"!isEditable\"></mat-datepicker-toggle>\r\n                <mat-datepicker #picker></mat-datepicker>\r\n            </mat-form-field>\r\n        </div>\r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"col\">\r\n            <mat-radio-group formControlName=\"gender\" name=\"gender\">\r\n                <mat-radio-button value=\"M\" color=\"primary\" [disabled]=\"!isEditable\">Masculino</mat-radio-button>\r\n                <mat-radio-button value=\"F\" [disabled]=\"!isEditable\"> Femenino</mat-radio-button>\r\n            </mat-radio-group>\r\n        </div>\r\n    </div>\r\n</form>","import { Component, OnInit, Input } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-professional-form',\r\n  templateUrl: './professional-form.component.html',\r\n  styleUrls: ['./professional-form.component.scss','../forms.component.scss']\r\n})\r\nexport class ProfessionalFormComponent implements OnInit {\r\n\r\n  @Input() isEditable: boolean = true;\r\n  @Input() professionalForm: FormGroup;\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<form [formGroup] = \"professionalForm\">\r\n    <div class=\"row\">\r\n        <div class=\"col\">\r\n          <mat-form-field class=\"full-width\">\r\n            <input matInput placeholder=\"No. Colegiado\" formControlName = 'noCollegiate' name=\"noCollegiate\"\r\n              [readonly]=\"!isEditable\">\r\n              <mat-error *ngIf=\"professionalForm.controls['noCollegiate'].hasError('required')\">\r\n                Por favor instroduzca el <strong>Número de Colegiado</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n          <mat-form-field class=\"full-width\">\r\n            <mat-select matInput placeholder=\"Tipo\" formControlName = 'type' name=\"type\" [disabled]=\"!isEditable\">\r\n              <mat-option value=\"Enfermero\">Enfermero</mat-option>\r\n              <mat-option value=\"Médico\">Médico</mat-option>\r\n              <mat-option value=\"Administrativo\">Administrativo</mat-option>\r\n              </mat-select>\r\n          </mat-form-field>\r\n        </div>\r\n      </div>\r\n</form>","import { Component, OnInit } from '@angular/core';\r\nimport { AppUser } from '../model/app-user';\r\nimport { Router } from '@angular/router';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { AppUserService } from '../services/app-user.service';\r\nimport { UserService } from '../services/user.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  errorMessage: string = \"\";\r\n  user: AppUser = new AppUser();\r\n  constructor(private router: Router, private _snackBar: MatSnackBar, private appUserService: AppUserService, private userService: UserService) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  logUser() {\r\n    this.appUserService.LogUser(this.user).subscribe(\r\n      (success) => {\r\n        if (success) {\r\n          this._snackBar.open(\"Entrada Exitosa\", \"Aceptar\", {\r\n            duration: 2000,\r\n          });\r\n          var beforeRoute = this.userService.currentRoute;\r\n          beforeRoute = beforeRoute ? beforeRoute : \"users\";\r\n          this.router.navigate([beforeRoute]);\r\n        }\r\n      },\r\n      (error) => {\r\n        if (error.status === 401) {\r\n          this.errorMessage = \"Nombre de usuario o contraseña incorrecta\";\r\n        }\r\n        else {\r\n          this.router.navigate([\"error\"]);\r\n        }\r\n      });\r\n  }\r\n}\r\n","<div class=\"container\">\r\n    <div class=\"login-form\">\r\n        <img src=\"../../assets/img/login.png\" class=\"img-login\">\r\n        <form #theForm=\"ngForm\" (submit)=\"logUser()\" class=\"form-group full-width\">\r\n            <mat-form-field class=\"full-width\">\r\n                <input type=\"text\" matInput placeholder=\"Nombre de Usuario\" name=\"Username\" [(ngModel)] = \"user.username\" required>\r\n            </mat-form-field>\r\n            <mat-form-field class=\"full-width\">\r\n                <input type=\"password\" matInput placeholder=\"Contraseña\" name=\"Password\" [(ngModel)] = \"user.password\" required>\r\n            </mat-form-field>\r\n            <div *ngIf=\"errorMessage\" class=\"alert\">{{errorMessage}}</div>\r\n            <!-- <mat-slide-toggle class=\"pull-left\" color=\"primary\" [(ngModel)]=\"user.rememberMe\" name=\"rememberMe\">Recordar</mat-slide-toggle> -->\r\n            <button type=\"submit\" class=\"full-width\" mat-raised-button color=\"primary\">Entrar</button>\r\n        </form>\r\n    </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport {MatToolbarModule} from '@angular/material/toolbar';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { LayoutModule } from '@angular/cdk/layout';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport {MatTableModule} from '@angular/material/table';\r\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\r\nimport {MatSortModule} from '@angular/material/sort';\r\nimport {CdkTableModule} from '@angular/cdk/table'; \r\nimport {MatPaginatorModule} from '@angular/material/paginator';\r\nimport {MatDatepickerModule} from '@angular/material/datepicker';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\r\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\r\nimport {MatBadgeModule} from '@angular/material/badge';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {MatStepperModule} from '@angular/material/stepper';\r\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\r\n\r\n\r\n@NgModule({\r\n  exports:[\r\n    MatToolbarModule,\r\n    LayoutModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatTabsModule,\r\n    MatTableModule,\r\n    MatProgressSpinnerModule,\r\n    MatSortModule,\r\n    CdkTableModule,\r\n    MatPaginatorModule,\r\n    MatDatepickerModule,\r\n    MatInputModule,\r\n    MatNativeDateModule,\r\n    MatAutocompleteModule,\r\n    MatSnackBarModule,\r\n    MatBadgeModule,\r\n    MatDialogModule,\r\n    MatStepperModule,\r\n    MatSlideToggleModule\r\n  ]\r\n})\r\nexport class MaterialModule { }\r\n","export class Address{\r\n    street:string;\r\n    no: number;\r\n    door: string;\r\n    zipCode:string;\r\n    city:string; \r\n}","export class AppUser{\r\n    username:string;\r\n    password:string;\r\n    rememberMe:boolean;\r\n}","import { User } from './user';\r\nimport { InsuranceCarrier } from './insurance-carrier';\r\n\r\nexport class Patient extends User {\r\n    NHC: string;\r\n    insuranceCarriers: InsuranceCarrier[];\r\n}\r\n\r\n","import { User } from './user';\r\n\r\ntype ProfessionalType = \"Médico\" | \"Enfermero\" | \"Administrativo\";\r\nexport class Professional extends User{\r\n    noCollegiate: string;\r\n    type: ProfessionalType;\r\n}","import { Address } from \"./Address\";\r\n\r\ntype gender = \"M\" | \"F\";\r\nexport class User {\r\n    _id: string;\r\n    name: string;\r\n    lastName: string;\r\n    secondLastName: string;\r\n    gender: gender;\r\n    birthDay: Date;\r\n    documentationId: string;\r\n    address: Address;\r\n}\r\n","import { Component, OnInit, OnChanges } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { User } from '../model/user';\r\nimport { Address } from '../model/Address';\r\nimport { Professional } from '../model/professional';\r\nimport { Patient } from '../model/patient';\r\nimport { UserService, Resource } from '../services/user.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { FormsService } from '../services/forms.service';\r\nimport { Observable } from 'rxjs';\r\nimport { map, shareReplay } from 'rxjs/operators';\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\r\n\r\n\r\n@Component({\r\n  selector: 'app-new-user',\r\n  templateUrl: './new-user.component.html',\r\n  styleUrls: ['./new-user.component.scss'],\r\n  providers: [FormsService]\r\n})\r\nexport class NewUserComponent implements OnInit {\r\n\r\n  personalInfoForm: FormGroup;\r\n  addressForm: FormGroup;\r\n  patientForm: FormGroup;\r\n  professionalForm: FormGroup;\r\n\r\n  type: string;\r\n  isTypeSelected: boolean = false;\r\n  user: User;\r\n\r\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\r\n    .pipe(\r\n      map(result => result.matches),\r\n      shareReplay()\r\n    );\r\n\r\n  constructor(private route: ActivatedRoute,\r\n    private userService: UserService,\r\n    private _snackBar: MatSnackBar,\r\n    private router: Router,\r\n    public formService: FormsService,\r\n    private breakpointObserver: BreakpointObserver) { }\r\n\r\n  ngOnInit(): void {\r\n    this.userService.currentRoute = this.router.url;\r\n    if (this.userService.loginRequired) {\r\n      this.router.navigate([\"\"]);\r\n    }\r\n    else {\r\n      this.route.paramMap.subscribe(params => {\r\n        var userType = params.get('userType');\r\n        var addr = new Address();\r\n        if (!userType) {\r\n          this.isTypeSelected = false;\r\n        }\r\n        else if (userType === \"professional\") {\r\n          this.formService.isProfessional = true;\r\n          this.isTypeSelected = true;\r\n          this.type = \"Profesional\";\r\n          this.user = new Professional();\r\n          this.user.address = addr;\r\n          this.formService.user = this.user;\r\n          this.formService.createProfessionalForm();\r\n        }\r\n        else if (userType === \"patient\") {\r\n          this.formService.isProfessional = false;\r\n          this.isTypeSelected = true;\r\n          this.type = \"Paciente\";\r\n          this.user = new Patient();\r\n          this.user['insuranceCarriers'] = [];\r\n          this.user.address = addr;\r\n          this.formService.user = this.user;\r\n          this.formService.createPatientForm();\r\n        }\r\n        else {\r\n          this.router.navigate([\"not-found\"]);\r\n          return;\r\n        }\r\n        this.loadForms()\r\n      });\r\n    }\r\n  }\r\n\r\n  private loadForms() {\r\n    this.personalInfoForm = this.formService.personalInfoForm;\r\n    this.addressForm = this.formService.addressForm;\r\n    this.patientForm = this.formService.patientForm;\r\n    this.professionalForm = this.formService.professionalForm;\r\n  }\r\n\r\n  saveUser() {\r\n    this.formService.getUser();\r\n    this.userService.addNewUser(this.user, this.formService.isProfessional ? \"professionals\" : \"patients\").subscribe(\r\n      (success) => {\r\n        this._snackBar.open(\"Usuario Agregado\", \"Aceptar\", {\r\n          duration: 2000,\r\n        });\r\n        this.router.navigate([\"users\"]);\r\n      },\r\n      (error) => {\r\n        if (error.status == 401) {\r\n          //Unauthorized\r\n          this.router.navigate([\"\"]);\r\n        }\r\n        else {\r\n          this.router.navigate([\"error\"]);\r\n        }\r\n      });\r\n  }\r\n}\r\n","<div *ngIf=\"isTypeSelected\">\r\n    <div *ngIf=\"!(isHandset$|async)\">\r\n        <mat-horizontal-stepper #stepper [linear]=\"true\">\r\n            <mat-step [stepControl]=\"personalInfoForm\">\r\n                <ng-template matStepLabel>Datos Personales</ng-template>\r\n                <app-personal-info-form [personalInfoForm]=\"personalInfoForm\">\r\n                </app-personal-info-form>\r\n                <div>\r\n                    <button mat-raised-button color=\"primary\" matStepperNext>Siguiente</button>\r\n                </div>\r\n            </mat-step>\r\n            <mat-step [stepControl]=\"addressForm\">\r\n                <ng-template matStepLabel>Dirección</ng-template>\r\n                <app-address-form [addressFormGroup]=\"addressForm\"></app-address-form>\r\n                <div>\r\n                    <button mat-raised-button class=\"m-1\" matStepperPrevious>Atrás</button>\r\n                    <button mat-raised-button color=\"primary\" matStepperNext>Siguiente</button>\r\n                </div>\r\n            </mat-step>\r\n\r\n            <mat-step *ngIf=\"!this.formService.isProfessional\" [stepControl]=\"patientForm\">\r\n                <ng-template matStepLabel>{{type}}</ng-template>\r\n                <app-patient-form [patientForm]=\"patientForm\" [insuranceCarriers]=\"user['insuranceCarriers']\">\r\n                </app-patient-form>\r\n                <div>\r\n                    <button mat-raised-button class=\"m-1\" matStepperPrevious>Atrás</button>\r\n                    <button mat-raised-button color=\"primary\" matStepperNext>Siguiente</button>\r\n                </div>\r\n            </mat-step>\r\n\r\n            <mat-step *ngIf=\"this.formService.isProfessional\" [stepControl]=\"professionalForm\">\r\n                <ng-template matStepLabel>{{type}}</ng-template>\r\n                <app-professional-form [professionalForm]=\"professionalForm\">\r\n                </app-professional-form>\r\n                <div>\r\n                    <button mat-raised-button class=\"m-1\" matStepperPrevious>Atrás</button>\r\n                    <button mat-raised-button color=\"primary\" matStepperNext>Siguiente</button>\r\n                </div>\r\n            </mat-step>\r\n            <mat-step>\r\n                <ng-template matStepLabel>Fin</ng-template>\r\n                <p>Ya has terminado. Presiona en Finalizar para completar la acción.</p>\r\n                <div>\r\n                    <button mat-raised-button class=\"m-1\" matStepperPrevious>Atrás</button>\r\n                    <button mat-raised-button class=\"m-1\" color=\"primary\" (click)=\"saveUser()\"\r\n                        type=\"submit\">Finalizar</button>\r\n                </div>\r\n            </mat-step>\r\n        </mat-horizontal-stepper>\r\n    </div>\r\n\r\n    <div *ngIf=\"(isHandset$|async)\">\r\n        <mat-vertical-stepper #stepper [linear]=\"true\">\r\n            <mat-step [stepControl]=\"personalInfoForm\">\r\n                <ng-template matStepLabel>Datos Personales</ng-template>\r\n                <app-personal-info-form [personalInfoForm]=\"personalInfoForm\">\r\n                </app-personal-info-form>\r\n                <div>\r\n                    <button mat-raised-button color=\"primary\" matStepperNext>Siguiente</button>\r\n                </div>\r\n            </mat-step>\r\n            <mat-step [stepControl]=\"addressForm\">\r\n                <ng-template matStepLabel>Dirección</ng-template>\r\n                <app-address-form [addressFormGroup]=\"addressForm\"></app-address-form>\r\n                <div>\r\n                    <button mat-raised-button class=\"m-1\" matStepperPrevious>Atrás</button>\r\n                    <button mat-raised-button color=\"primary\" matStepperNext>Siguiente</button>\r\n                </div>\r\n            </mat-step>\r\n\r\n            <mat-step *ngIf=\"!this.formService.isProfessional\" [stepControl]=\"patientForm\">\r\n                <ng-template matStepLabel>{{type}}</ng-template>\r\n                <app-patient-form [patientForm]=\"patientForm\" [insuranceCarriers]=\"user['insuranceCarriers']\">\r\n                </app-patient-form>\r\n                <div>\r\n                    <button mat-raised-button class=\"m-1\" matStepperPrevious>Atrás</button>\r\n                    <button mat-raised-button color=\"primary\" matStepperNext>Siguiente</button>\r\n                </div>\r\n            </mat-step>\r\n\r\n            <mat-step *ngIf=\"this.formService.isProfessional\" [stepControl]=\"professionalForm\">\r\n                <ng-template matStepLabel>{{type}}</ng-template>\r\n                <app-professional-form [professionalForm]=\"professionalForm\">\r\n                </app-professional-form>\r\n                <div>\r\n                    <button mat-raised-button class=\"m-1\" matStepperPrevious>Atrás</button>\r\n                    <button mat-raised-button color=\"primary\" matStepperNext>Siguiente</button>\r\n                </div>\r\n            </mat-step>\r\n            <mat-step>\r\n                <ng-template matStepLabel>Fin</ng-template>\r\n                <p>Ya has terminado. Presiona en Finalizar para completar la acción.</p>\r\n                <div>\r\n                    <button mat-raised-button class=\"m-1\" matStepperPrevious>Atrás</button>\r\n                    <button mat-raised-button class=\"m-1\" color=\"primary\" (click)=\"saveUser()\"\r\n                        type=\"submit\">Finalizar</button>\r\n                </div>\r\n            </mat-step>\r\n        </mat-vertical-stepper>\r\n    </div>\r\n</div>\r\n\r\n<div *ngIf=\"!isTypeSelected\">\r\n    <div class=\"center\">\r\n        <h2 class=\"title\"><img src=\"../../assets/img/login.png\" width=\"30%\" *ngIf=\"isHandset$|async\">Seleccione el tipo de usuario que desea crear</h2>\r\n    </div>\r\n    <div class=\"type\">\r\n        <div class=\"service\" routerLink=\"/user/new/professional\">\r\n            <mat-icon class=\"icon-holder lg-icon\">local_hospital</mat-icon>\r\n            <h4 class=\"heading\">Profesional</h4>\r\n            <h1 class=\"description\">\r\n                <img src=\"../../assets/img/doctor.jpg\" width=\"40%\">\r\n            </h1>\r\n        </div>\r\n\r\n        <div class=\"service\" routerLink=\"/user/new/patient\">\r\n            <div class=\"icon-holder\">\r\n                <h1> <i class=\"fa fa-heartbeat lg-icon\"></i> </h1>\r\n            </div>\r\n            <h4 class=\"heading\">Paciente</h4>\r\n            <h1 class=\"description\">\r\n                <img src=\"../../assets/img/patient2.png\" width=\"40%\">\r\n            </h1>\r\n        </div>\r\n    </div>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-not-found',\r\n  templateUrl: './not-found.component.html',\r\n  styleUrls: ['./not-found.component.scss']\r\n})\r\nexport class NotFoundComponent implements OnInit {\r\n\r\n  constructor(private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  redirectToHome(){\r\n    this.router.navigate([\"users\"]);\r\n  }\r\n\r\n}\r\n","<div class=\"container\">\r\n    <div class=\"page-body\">\r\n        <div class=\"mat-display-4\"><strong>404</strong></div>\r\n        <div class=\"mat-display-1\"> Página no encontrada </div>\r\n        <p> Ooops! Esta no es la página que buscas</p>\r\n        <img src=\"../../assets/img/not-found2.png\" width=\"100%\">\r\n        <button mat-stroked-button (click)=\"redirectToHome()\">Ir a Home</button>\r\n    </div>\r\n</div>","import { Directive } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, FormControl, ValidationErrors, Validators, AbstractControl } from '@angular/forms';\r\n\r\n\r\n  const FILTERS: string[] = [\r\n    \"name\",\r\n    \"lastName\",\r\n    \"secondLastName\",\r\n    \"noCollegiate\",\r\n    \"documentationId\",\r\n    \"type\",\r\n    \"NHC\",\r\n    \"gender\"\r\n  ];\r\n\r\n@Directive({\r\n  selector: '[QueryValidator]',\r\n  providers: [{ provide: NG_VALIDATORS, useExisting: QueryValidatorDirective, multi: true }]\r\n})\r\nexport class QueryValidatorDirective implements Validator {\r\n  constructor() {\r\n  }\r\n  validate(control: AbstractControl): ValidationErrors {\r\n    let result: boolean = true;\r\n    let query: string = control.value;\r\n    if(!query){\r\n      return null;\r\n    }\r\n    let filters = query.split(\"&\");\r\n    for (let i = 0; i < filters.length; i++) {\r\n      let field: string = filters[i].split(\"=\")[0];\r\n      if (field == \"insuranceCarriers\" || filters[i] == \"address\") {\r\n        result = false;\r\n        break;\r\n      }\r\n      if (!FILTERS.find(s => s == field)) {\r\n        result = false;\r\n        break;\r\n      }\r\n    }\r\n    const message = {\r\n      'InvalidQuery': {\r\n        'message': 'Invalid Query'\r\n      }\r\n    }\r\n    return result ? null: message;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AppUser } from '../model/app-user';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { TokenResponse } from '../DTO/token-response';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AppUserService {\r\n    BASE_URI = \"https://his-rest-api.herokuapp.com/auth/login\";\r\n\r\n    private _tokenSubject = new BehaviorSubject<string>(\"\");\r\n    private _token: Observable<string> = this._tokenSubject.asObservable();\r\n\r\n    get token() {\r\n        return this._token;\r\n    }\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    /**\r\n     * Log the User and Get Token for Auth\r\n     */\r\n    public LogUser(appUser: AppUser): Observable<boolean> {\r\n        return this.http.post<TokenResponse>(this.BASE_URI, appUser)\r\n            .pipe(\r\n                map((response: TokenResponse) => {\r\n                    this._tokenSubject.next(response.access_token);\r\n                    return true;\r\n                }));\r\n    }\r\n}\r\n","import { FormBuilder, FormGroup, Validators, FormControl, ValidatorFn } from '@angular/forms';\r\nimport { User } from '../model/user';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class FormsService {\r\n\r\n  //Forms\r\n  personalInfoForm: FormGroup;\r\n  addressForm: FormGroup;\r\n  patientForm: FormGroup;\r\n  professionalForm: FormGroup;\r\n  user: User;\r\n\r\n  //flags\r\n  isProfessional: boolean = true;\r\n  isEditable: boolean = true;\r\n\r\n  constructor(private formbuilder: FormBuilder, private http: HttpClient) { }\r\n\r\n  //Form Builder Functions\r\n\r\n  public createProfessionalForm(): void {\r\n    this.createUserForm();\r\n    this.createAddressForm();\r\n    this.professionalForm = this.formbuilder.group({\r\n      noCollegiate: [this.user['noCollegiate'], Validators.required],\r\n      type: [this.user['type']]\r\n    });\r\n\r\n  }\r\n\r\n  public createPatientForm(): void {\r\n    this.createUserForm();\r\n\r\n    this.createAddressForm();\r\n\r\n    this.patientForm = this.formbuilder.group({\r\n      NHC: [this.user['NHC'], Validators.required]\r\n    });\r\n  }\r\n\r\n  private createUserForm(): void {\r\n    this.personalInfoForm = this.formbuilder.group({\r\n      name: [this.user.name, Validators.required],\r\n      lastName: [this.user.lastName, Validators.required],\r\n      secondLastName: [this.user.secondLastName],\r\n      documentationId: [this.user.documentationId, this.docValidation],\r\n      birthDay: [this.user.birthDay],\r\n      gender: [this.user.gender]\r\n    });\r\n  }\r\n\r\n  private createAddressForm(): void {\r\n    this.addressForm = this.formbuilder.group({\r\n      street: [this.user.address.street],\r\n      door: [this.user.address.door],\r\n      no: [this.user.address.no],\r\n      city: [this.user.address.city, this.noSpecialChars],\r\n      zipCode: [this.user.address.zipCode, Validators.pattern(/^[0-9]{5,5}$/)]\r\n    })\r\n  }\r\n\r\n  /**\r\n   * This function load the cities availables for suggestion in the form\r\n   */\r\n  public loadCities(): Observable<string[]> {\r\n    return this.http.get(\"../../assets/cities.json\").pipe(map((res) => {\r\n      return res[\"cities\"];\r\n    }));\r\n  }\r\n \r\n  //Get Info from Reactive Forms\r\n\r\n  public getUser(): void {\r\n    this.mapFormToUser(this.personalInfoForm);\r\n    this.mapFormToUser(this.addressForm, \"address\");\r\n    if (this.isProfessional) {\r\n      this.mapFormToUser(this.professionalForm);\r\n    }\r\n    else {\r\n      this.getInsuranceCarriers();\r\n    }\r\n  }\r\n\r\n  private getInsuranceCarriers() {\r\n    var insurancesKeys: string[] = Object.keys(this.patientForm.getRawValue());\r\n    this.user['insuranceCarriers'] = [];\r\n    insurancesKeys.forEach((key) => {\r\n      if (key == \"NHC\") {\r\n        this.user['NHC'] = this.patientForm.value['NHC'];\r\n      }\r\n      else {\r\n        this.user['insuranceCarriers'].push(this.patientForm.value[key]);\r\n      }\r\n    });\r\n  }\r\n\r\n  private mapFormToUser(form: FormGroup, property: string = \"\"): void {\r\n    if (!property) {\r\n      this.user = Object.assign(this.user, form.getRawValue());\r\n    }\r\n    else {\r\n      this.user[property] = form.getRawValue();\r\n    }\r\n  }\r\n\r\n  //Validators\r\n\r\n  public docValidation(c: FormControl) {\r\n    let PASSPORT = new RegExp(/^[a-z A-Z]{3}[0-9]{6}[a-z]?$/);\r\n    let DNI = new RegExp(/^[0-9]{8}[TRWAGMYFPDXBNJZSQVHLCKE]$/);\r\n    let NIE = new RegExp(/^[XYZ][0-9]{7}[TRWAGMYFPDXBNJZSQVHLCKE]$/);\r\n\r\n    let result = PASSPORT.test(c.value);\r\n    result = result || !c.value;\r\n    result = result || DNI.test(c.value);\r\n    result = result || NIE.test(c.value);\r\n    return result ? null : {\r\n      validate: {\r\n        valid: false\r\n      }\r\n    };\r\n  }\r\n\r\n  public noSpecialChars(c: FormControl) {\r\n    let REGEXP = new RegExp(/[~`!#$%\\^&*+=\\-\\[\\]\\\\';,/{}|\\\\\":<>\\?]/);\r\n\r\n    return REGEXP.test(c.value) ? {\r\n      validate: {\r\n        valid: true\r\n      }\r\n    }:null;\r\n  }\r\n\r\n  public allowOnlyNumbers(event: KeyboardEvent): void {\r\n    if ((event.keyCode < 48 || event.keyCode > 57) && event.keyCode !== 9 && event.keyCode !== 8) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpHeaders } from \"@angular/common/http\";\r\nimport { User } from '../model/user';\r\nimport { Professional } from '../model/professional';\r\nimport { Patient } from '../model/patient';\r\nimport { Observable } from 'rxjs';\r\nimport { forkJoin } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { AppUserService } from './app-user.service';\r\n\r\n\r\nexport type Resource = \"professionals\" | \"patients\";\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n  private BASE_URI = \"https://his-rest-api.herokuapp.com/\";\r\n  private TOKEN = \"\";\r\n\r\n  private _professionals: Professional[] = [];\r\n  private _patients: Patient[] = [];\r\n\r\n  get professionals() {\r\n    return this._professionals;\r\n  }\r\n\r\n  get patients() {\r\n    return this._patients;\r\n  }\r\n\r\n  get loginRequired() {\r\n    return !this.TOKEN;\r\n  }\r\n\r\n  currentRoute: string = \"\";\r\n\r\n  constructor(private http: HttpClient, private appUserService: AppUserService) {\r\n    appUserService.token.subscribe((token) => {\r\n      this.TOKEN = token;\r\n    });\r\n  }\r\n\r\n  public loadUsers(): Observable<boolean> {\r\n    return forkJoin(this.loadPatients(), this.loadProfessionals()).pipe(\r\n      map((response: [Patient[], Professional[]]) => {\r\n        this._patients = response[0];\r\n        this._professionals = response[1];\r\n        return true;\r\n      }\r\n      ));\r\n  }\r\n\r\n  private loadProfessionals(): Observable<Professional[]> {\r\n    const headers = new HttpHeaders().set(\"Authorization\", `Bearer ${this.TOKEN}`);\r\n    return this.http.get<Professional[]>(this.BASE_URI + \"professionals\", { headers });\r\n  }\r\n\r\n  private loadPatients(): Observable<Patient[]> {\r\n    const headers = new HttpHeaders().set(\"Authorization\", `Bearer ${this.TOKEN}`);\r\n    return this.http.get<Patient[]>(this.BASE_URI + \"patients\", { headers });\r\n  }\r\n\r\n  public getUserById(id: string, resource: Resource): Observable<User> {\r\n    const headers = new HttpHeaders().set(\"Authorization\", `Bearer ${this.TOKEN}`);\r\n    return this.http.get<User>(this.BASE_URI + resource + \"/\" + id, {headers});\r\n  }\r\n\r\n  public updateUser(user: User, resource: Resource): Observable<User> {\r\n    const headers = new HttpHeaders().set(\"Authorization\", `Bearer ${this.TOKEN}`);\r\n    return this.http.put<User>(this.BASE_URI + resource + \"/\" + user._id, user, { headers });\r\n  }\r\n\r\n  public deleteUser(id: string, resource: Resource) {\r\n    const headers = new HttpHeaders().set(\"Authorization\", `Bearer ${this.TOKEN}`);\r\n    return this.http.delete(this.BASE_URI + resource + \"/\" + id, { headers });\r\n  }\r\n\r\n  public addNewUser(user, resource: Resource): Observable<User> {\r\n    const headers = new HttpHeaders().set(\"Authorization\", `Bearer ${this.TOKEN}`);\r\n    return this.http.post<User>(this.BASE_URI + resource, user, { headers });\r\n  }\r\n\r\n  public deleteAllDoctors() {\r\n    return forkJoin(this._professionals.filter(pro => pro.type == \"Médico\").map(pro => this.deleteUser(pro._id, \"professionals\")));\r\n  }\r\n\r\n  public sendQuery(query: string): Observable<boolean> {\r\n    return forkJoin(this.sendProfessionalQuery(query), this.sendPatientQuery(query)).pipe(\r\n      map((response: [Professional[], Patient[]]) => {\r\n        this._professionals = response[0];\r\n        this._patients = response[1];\r\n        return true;\r\n      }));\r\n  }\r\n\r\n  private sendProfessionalQuery(query: string): Observable<Professional[]> {\r\n    const headers = new HttpHeaders().set(\"Authorization\", `Bearer ${this.TOKEN}`);\r\n    return this.http.get<Professional[]>(this.BASE_URI + \"professionals?\" + query, { headers });\r\n  }\r\n\r\n  private sendPatientQuery(query: string): Observable<Patient[]> {\r\n    const headers = new HttpHeaders().set(\"Authorization\", `Bearer ${this.TOKEN}`);\r\n    return this.http.get<Patient[]>(this.BASE_URI + \"patients?\" + query, { headers });\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-top-bar',\n  templateUrl: './top-bar.component.html',\n  styleUrls: ['./top-bar.component.scss']\n})\nexport class TopBarComponent {\n\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\n    .pipe(\n      map(result => result.matches),\n      shareReplay()\n    );\n\n  constructor(private breakpointObserver: BreakpointObserver) {}\n\n}\n","<mat-sidenav-container class=\"sidenav-container\">\r\n  <mat-sidenav #drawer class=\"sidenav\" fixedInViewport [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\"\r\n    [mode]=\"(isHandset$ | async) ? 'over' : 'over'\">\r\n    <mat-toolbar>Menu</mat-toolbar>\r\n    <mat-nav-list>\r\n      <a mat-list-item routerLink=\"/users\">\r\n        <mat-icon>account_circle</mat-icon> Usuarios\r\n      </a>\r\n      <!-- <mat-slide-toggle class=\"ml-1\" color=\"primary\" name=\"DarkTheme\">Tema Oscuro</mat-slide-toggle> -->\r\n      <a mat-list-item routerLink=\"/user/new\">\r\n        <mat-icon>add</mat-icon> Nuevo Usuario\r\n      </a>\r\n      <a mat-list-item routerLink=\"\">\r\n        <mat-icon>clear</mat-icon> Salir\r\n      </a>\r\n    </mat-nav-list>\r\n  </mat-sidenav>\r\n  <mat-sidenav-content>\r\n    <mat-toolbar color=\"primary\" class=\"navbar\">\r\n      <div class=\"nav-title\">\r\n        <button type=\"button\" aria-label=\"Toggle sidenav\" mat-icon-button (click)=\"drawer.toggle()\"\r\n          *ngIf=\"isHandset$ | async\">\r\n          <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\r\n        </button>\r\n        <span>HIS</span>\r\n      </div>\r\n      <div class=\"nav-list\" *ngIf=\"(isHandset$|async) === false\">\r\n        <button (click)=\"drawer.toggle()\" mat-icon-button class=\"example-icon\"\r\n          aria-label=\"Example icon-button with menu icon\">\r\n          <mat-icon>menu</mat-icon>\r\n        </button>\r\n      </div>\r\n    </mat-toolbar>\r\n    <div class=\"full-page\">\r\n      <router-outlet></router-outlet>\r\n    </div>\r\n    <app-footer></app-footer>\r\n\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container>","import { Component, OnInit, DoCheck } from '@angular/core';\r\nimport { User } from '../model/user';\r\nimport { UserService, Resource } from '../services/user.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { FormGroup, FormBuilder } from '@angular/forms';\r\nimport { FormsService } from '../services/forms.service';\r\n\r\n@Component({\r\n  selector: 'app-user-details',\r\n  templateUrl: './user-details.component.html',\r\n  styleUrls: ['./user-details.component.scss'],\r\n  providers: [FormsService]\r\n})\r\nexport class UserDetailsComponent implements OnInit {\r\n\r\n  user: User;\r\n\r\n  personalInfoForm: FormGroup;\r\n  addressForm: FormGroup;\r\n  patientForm: FormGroup;\r\n  professionalForm: FormGroup;\r\n  userForm: FormGroup;\r\n\r\n  loading: boolean = true;\r\n  type: string;\r\n\r\n  constructor(private route: ActivatedRoute,\r\n    private userService: UserService,\r\n    private router: Router,\r\n    private _snackBar: MatSnackBar,\r\n    public formService: FormsService,\r\n    private formbuilder: FormBuilder) { }\r\n\r\n  ngOnInit() {\r\n    this.userService.currentRoute = this.router.url;\r\n    if (this.userService.loginRequired) {\r\n      this.router.navigate([\"\"]);\r\n    }\r\n    else {\r\n      this.loading = true;\r\n      this.route.url.subscribe((segments) => {\r\n        this.formService.isEditable = (segments.find(s => s.path == \"edit\") !== undefined);\r\n      });\r\n\r\n      this.route.paramMap.subscribe(params => {\r\n        var userType = params.get('userType');\r\n        var id: string = params.get('id');\r\n        if (id == undefined) {\r\n          this.router.navigate([\"not-found\"]);\r\n        }\r\n        else {\r\n          this.loadUser(id, userType);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private loadUser(id: string, userType: string): void {\r\n    if (userType == \"professional\") {\r\n      this.user = this.userService.professionals.find(pro => pro._id == id);\r\n      this.formService.isProfessional = true;\r\n      this.type = \"Profesional\";\r\n      if (!this.user) {\r\n        //No Cache\r\n        this.getUserbyId(id);\r\n      }\r\n      else {\r\n        this.formService.user = this.user;\r\n        this.formService.createProfessionalForm();\r\n        this.loadForms();\r\n      }\r\n    }\r\n    else if (userType == \"patient\") {\r\n      this.user = this.userService.patients.find(patient => patient._id == id);\r\n      this.formService.isProfessional = false;\r\n      this.type = \"Paciente\";\r\n      if (!this.user) {\r\n        //No Cache\r\n        this.getUserbyId(id);\r\n      }\r\n      else {\r\n        this.formService.user = this.user;\r\n        this.formService.createPatientForm();\r\n        this.loadForms();\r\n      }\r\n    }\r\n    else {\r\n      this.router.navigate([\"not-found\"]);\r\n    }\r\n  }\r\n\r\n  private getUserbyId(id: string) {\r\n    var resource: Resource = this.formService.isProfessional ? \"professionals\" : \"patients\";\r\n    this.userService.getUserById(id, resource).subscribe(\r\n      response => {\r\n        this.user = response;\r\n        this.formService.user = this.user;\r\n        if (this.formService.isProfessional) {\r\n          this.formService.createProfessionalForm();\r\n        }\r\n        else {\r\n          this.formService.createPatientForm();\r\n        }\r\n        this.loadForms();\r\n      },\r\n      error => {\r\n        if (error.status === 400) {\r\n          this.router.navigate([\"not-found\"]);\r\n        }\r\n        else {\r\n          this.router.navigate([\"error\"]);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  private loadForms() {\r\n    this.loading = false;\r\n    this.personalInfoForm = this.formService.personalInfoForm;\r\n    this.addressForm = this.formService.addressForm;\r\n    this.patientForm = this.formService.patientForm;\r\n    this.professionalForm = this.formService.professionalForm;\r\n    this.userForm = this.formbuilder.group({\r\n      personalInfo: [this.personalInfoForm],\r\n      addressForm: [this.addressForm],\r\n      professionalForm: [this.professionalForm]\r\n    });\r\n  }\r\n\r\n  saveUser() {\r\n    this.formService.getUser();\r\n    var resource: Resource = this.formService.isProfessional ? \"professionals\" : \"patients\";\r\n    this.userService.updateUser(this.user, resource).subscribe(\r\n      response => {\r\n        this.router.navigate([\"users\"]);\r\n        this._snackBar.open(\"Usuario Actualizado\", \"Aceptar\", {\r\n          duration: 2000,\r\n        });\r\n      },\r\n      (error) => {\r\n        if (error.status == 401) {\r\n          //Unauthorized\r\n          this.router.navigate([\"\"]);\r\n        }\r\n        else{\r\n          this.router.navigate([\"error\"]);\r\n        }\r\n      }\r\n    );\r\n  }\r\n}\r\n","<div class=\"full-page\">\r\n  <div class=\"container\" *ngIf=\"!loading\">\r\n    <form [formGroup]=\"userForm\" novalidate (submit)=\"saveUser()\">\r\n      <mat-tab-group>\r\n        <mat-tab label=\"Datos Personales\">\r\n          <mat-card class=\"shipping-card\">\r\n            <mat-card-header>\r\n              <mat-card-title>Detalles</mat-card-title>\r\n            </mat-card-header>\r\n            <mat-card-content>\r\n              <app-personal-info-form [isEditable]=\"formService.isEditable\" [personalInfoForm]=\"personalInfoForm\">\r\n              </app-personal-info-form>\r\n            </mat-card-content>\r\n            <mat-card-actions>\r\n              <button mat-raised-button color=\"primary\" type=\"submit\" *ngIf=\"formService.isEditable\"\r\n                [disabled]=\"personalInfoForm.invalid || addressForm.invalid || patientForm?.invalid || professionalForm?.invalid\">Guardar</button>\r\n              <button mat-stroked-button color=\"warn\" routerLink=\"/users\"\r\n                *ngIf=\"formService.isEditable\">Cancelar</button>\r\n\r\n            </mat-card-actions>\r\n          </mat-card>\r\n        </mat-tab>\r\n        <mat-tab label=\"Dirección\">\r\n          <mat-card class=\"shipping-card\">\r\n            <mat-card-header class=\"mt-5\">\r\n              <mat-card-title>Dirección</mat-card-title>\r\n            </mat-card-header>\r\n            <mat-card-content>\r\n              <app-address-form [isEditable]=\"formService.isEditable\" [addressFormGroup]=\"addressForm\">\r\n              </app-address-form>\r\n            </mat-card-content>\r\n            <mat-card-actions>\r\n              <button mat-raised-button color=\"primary\" type=\"submit\" *ngIf=\"formService.isEditable\"\r\n                [disabled]=\"personalInfoForm.invalid || addressForm.invalid || patientForm?.invalid || professionalForm?.invalid\">Guardar</button>\r\n              <button mat-stroked-button color=\"warn\" routerLink=\"/users\"\r\n                *ngIf=\"formService.isEditable\">Cancelar</button>\r\n            </mat-card-actions>\r\n          </mat-card>\r\n        </mat-tab>\r\n        <mat-tab label={{type}}>\r\n          <mat-card class=\"shipping-card\">\r\n            <mat-card-header>\r\n              <mat-card-title>Información del {{type}}</mat-card-title>\r\n            </mat-card-header>\r\n            <mat-card-content>\r\n              <app-professional-form *ngIf=\"formService.isProfessional\" [isEditable]=\"formService.isEditable\"\r\n                [professionalForm]=\"professionalForm\"></app-professional-form>\r\n              <app-patient-form *ngIf=\"!formService.isProfessional\" [isEditable]=\"formService.isEditable\"\r\n                [patientForm]=\"patientForm\" [insuranceCarriers]=\"user['insuranceCarriers']\"></app-patient-form>\r\n            </mat-card-content>\r\n            <mat-card-actions>\r\n              <button mat-raised-button color=\"primary\" type=\"submit\" *ngIf=\"formService.isEditable\"\r\n                [disabled]=\"personalInfoForm.invalid || addressForm.invalid || patientForm?.invalid || professionalForm?.invalid\">Guardar</button>\r\n              <button mat-stroked-button color=\"warn\" routerLink=\"/users\"\r\n                *ngIf=\"formService.isEditable\">Cancelar</button>\r\n\r\n            </mat-card-actions>\r\n          </mat-card>\r\n        </mat-tab>\r\n      </mat-tab-group>\r\n    </form>\r\n  </div>\r\n\r\n  <div class=\"center\" *ngIf=\"loading\">\r\n    <mat-spinner></mat-spinner>\r\n  </div>\r\n</div>","import { Component, OnInit, ViewChild, Input, OnChanges, SimpleChanges, Inject, Output, EventEmitter } from '@angular/core';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { User } from '../model/user';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { Professional } from '../model/professional';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { UserService, Resource } from '../services/user.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { DialogComponent } from '../dialog/dialog.component';\r\nimport { Router } from '@angular/router';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-users-list',\r\n  templateUrl: './users-list.component.html',\r\n  styleUrls: ['./users-list.component.scss']\r\n})\r\nexport class UsersListComponent implements OnInit, OnChanges {\r\n\r\n  @Input() displayedColumns: string[];\r\n  @Input() columnsNames: string[];\r\n  @Input() users: User[] = [];\r\n  @Output() reload = new EventEmitter<any>();\r\n  dataSource = new MatTableDataSource(this.users);\r\n\r\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  constructor(public dialog: MatDialog, private userService: UserService, private _snackBar: MatSnackBar, private router: Router) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (this.users !== undefined) {\r\n      this.dataSource = new MatTableDataSource(this.users);\r\n      this.dataSource.sort = this.sort;\r\n      this.dataSource.paginator = this.paginator;\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.dataSource.sort = this.sort;\r\n    this.dataSource.paginator = this.paginator;\r\n  }\r\n\r\n  deleteUser(user: User) {\r\n    const dialogRef = this.dialog.open(DialogComponent, {\r\n      width: '350px',\r\n      data: { title: \"Eliminar\", subtitle: \"Estás intentando borrar un usuario.\", body: \"¿Estás seguro?\", reject: \"No\", accept: \"Sí\" }\r\n    });\r\n    var isProfessional = (<Professional>user).noCollegiate != undefined;\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        var resource: Resource = isProfessional ? \"professionals\" : \"patients\";\r\n        this.userService.deleteUser(user._id, resource).subscribe(\r\n          () => {\r\n            this._snackBar.open(\"Usuario Eliminado\", \"Aceptar\", {\r\n              duration: 5000,\r\n            });\r\n            this.reload.emit();\r\n          },\r\n          (error) => { \r\n            if(error.status==401){\r\n              //Unauthorized\r\n              this.router.navigate[(\"\")];\r\n            }\r\n            else{\r\n              this.router.navigate[(\"error\")];\r\n            }\r\n          }\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n","<div class=\"container\">\n    <table mat-table [dataSource]=\"dataSource\" matSort class=\"mat-elevation-z8\">\n        <ng-container *ngFor=\"let column of displayedColumns;let i = index;\" matColumnDef={{column}}>\n            <div *ngIf=\"column != 'action'\">\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> {{columnsNames[i]}} </th>\n                <td mat-cell *matCellDef=\"let element\" routerLink=\"/user/{{element['noCollegiate'] != undefined?'professional':'patient'}}/{{element._id}}\"> {{element[column]}} </td>\n            </div>\n            <div *ngIf=\"column == 'action'\">\n                <th mat-header-cell *matHeaderCellDef mat-sort-header> {{columnsNames[i]}} </th>\n                <td mat-cell *matCellDef=\"let element\">\n                    <button mat-mini-fab color=\"primary\" routerLink=\"/user/edit/{{element['noCollegiate'] != undefined?'professional':'patient'}}/{{element._id}}\">\n                        <mat-icon>edit</mat-icon>\n                    </button>\n\n                    <button mat-mini-fab color=\"warn\" (click)=\"deleteUser(element)\">\n                        <mat-icon>delete</mat-icon>\n                    </button>\n\n                </td>\n            </div>\n        </ng-container>\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n    </table>\n    <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons class=\"box-shadow\"></mat-paginator>\n   \n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { UserService } from '../services/user.service';\r\nimport { User } from '../model/user';\r\nimport { Professional } from '../model/professional';\r\nimport { Patient } from '../model/patient';\r\nimport { DialogComponent } from '../dialog/dialog.component';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\r\nimport { Observable } from 'rxjs';\r\nimport { map, shareReplay } from 'rxjs/operators';\r\nimport { Router } from '@angular/router';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-users',\r\n  templateUrl: './users.component.html',\r\n  styleUrls: ['./users.component.scss']\r\n})\r\nexport class UsersComponent implements OnInit {\r\n  users: User[];\r\n  professionals: Professional[];\r\n  patients: Patient[];\r\n  query: string = \"\";\r\n\r\n  private _professionalsBackup: Professional[];\r\n  private _patientsBackup: Patient[];\r\n  advancedQuery: boolean;\r\n\r\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\r\n    .pipe(\r\n      map(result => result.matches),\r\n      shareReplay()\r\n    );\r\n\r\n  constructor(private userService: UserService,\r\n    public dialog: MatDialog,\r\n    private _snackBar: MatSnackBar,\r\n    private breakpointObserver: BreakpointObserver,\r\n    private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    this.userService.currentRoute = this.router.url;\r\n    if (this.userService.loginRequired) {\r\n      this.router.navigate([\"\"]);\r\n    }\r\n    else {\r\n      this.loadUsers();\r\n    }\r\n  }\r\n\r\n  loadUsers(): void {\r\n    this.userService.loadUsers().subscribe(\r\n      success => {\r\n        if (success) {\r\n          this.loadCollections();\r\n        }\r\n        else {\r\n          alert(\"Error Loading the Users\");\r\n        }\r\n      },\r\n      (error) => {\r\n        if (error.status == 401) {\r\n          //Unauthorized\r\n          this.router.navigate([\"\"]);\r\n        }\r\n        else {\r\n          this._snackBar.open(\"La conexión con la base de datos ha fallado\", \"Cerrar\", {\r\n            duration: 5000,\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  deleteDoctors() {\r\n    const dialogRef = this.dialog.open(DialogComponent, {\r\n      width: '350px',\r\n      data: { title: \"Eliminar Médicos\", subtitle: \"Esta operación eliminará a todos los médicos\", body: \"¿Estás seguro?\", reject: \"No\", accept: \"Sí\" }\r\n    });\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        this.userService.deleteAllDoctors().subscribe(\r\n          (res) => {\r\n            this._snackBar.open(\"Todos los médicos han sido borrados\", \"Cerrar\", {\r\n              duration: 5000,\r\n            });\r\n            this.loadUsers();\r\n          },\r\n          (error) => {\r\n            if (error.status) {\r\n              this.router.navigate([\"\"]);\r\n            }\r\n            else {\r\n              this.router.navigate([\"error\"]);\r\n            }\r\n          }\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  sendQuery() {\r\n    this.userService.sendQuery(this.query).subscribe(\r\n      (success) => {\r\n        if (success) {\r\n          this.loadCollections();\r\n        }\r\n      },\r\n      (error) => {\r\n        if (error.status == 401) {\r\n          //Unauthorized\r\n          this.router.navigate([\"\"]);\r\n        }\r\n        else {\r\n          this.router.navigate([\"error\"]);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  filterUsers() {\r\n    if (!this.query) {\r\n      this.loadCollections();\r\n    }\r\n    this.professionals = this._professionalsBackup.filter(professional => professional.name.includes(this.query));\r\n    this.patients = this._patientsBackup.filter(patient => patient.name.includes(this.query));\r\n    this.users = this.professionals;\r\n    this.users = this.users.concat(this.patients);\r\n  }\r\n\r\n  resetQuery(): void {\r\n    if (!this.query) {\r\n      this.loadUsers();\r\n    }\r\n  }\r\n\r\n  private loadCollections(): void {\r\n    this.professionals = this.userService.professionals;\r\n    this.patients = this.userService.patients;\r\n    this.users = this.professionals;\r\n    this.users = this.users.concat(this.patients);\r\n    //Backup\r\n    this._professionalsBackup = this.professionals;\r\n    this._patientsBackup = this.patients;\r\n  }\r\n}\r\n","<div class=\"search-bar\">\r\n    <div class=\"container\" *ngIf=\"advancedQuery\">\r\n        <form (submit)=\"sendQuery()\" class=\"row\" #form=\"ngForm\">\r\n            <mat-form-field class=\"full-width\">\r\n                <mat-label>Buscar</mat-label>\r\n                <input matInput placeholder=\"Ejemplo: name=William&lastName=Shackespare&id=3...\" name=\"Buscar\"\r\n                    [(ngModel)]=\"query\" #searchquery=\"ngModel\" (keyup)=\"resetQuery()\" QueryValidator>\r\n                <mat-error *ngIf=\"searchquery.invalid\">\r\n                    El formato de búsqueda es incorrecto. <a class=\"error-link\"\r\n                        href=\"https://github.com/williamvn/UserManagement/blob/master/README.md\">Vea Documentación</a>,\r\n                    para mas informcación.\r\n                </mat-error>\r\n            </mat-form-field>\r\n            <button mat-mini-fab type=\"submit\" color=\"primary\" [disabled]=\"form.invalid\">\r\n                <mat-icon matSuffix>search</mat-icon>\r\n            </button>\r\n        </form>\r\n        <mat-slide-toggle class=\"pull-right\" color=\"primary\" [(ngModel)]=\"advancedQuery\">Busqueda Avanzada\r\n        </mat-slide-toggle>\r\n    </div>\r\n\r\n    <div class=\"container\" *ngIf=\"!advancedQuery\">\r\n        <mat-form-field class=\"full-width\" *ngIf=\"!advancedQuery\">\r\n            <input matInput placeholder=\"Buscar\" name=\"Buscar\" (keyup)=\"filterUsers()\" [(ngModel)]=\"query\">\r\n            <mat-icon matSuffix>search</mat-icon>\r\n        </mat-form-field>\r\n        <mat-slide-toggle class=\"pull-right\" color=\"primary\" [(ngModel)]=\"advancedQuery\">Busqueda Avanzada\r\n        </mat-slide-toggle>\r\n    </div>\r\n</div>\r\n\r\n<mat-tab-group>\r\n    <mat-tab label=\"Todo\">\r\n        <div *ngIf=\"!(isHandset$|async)\">\r\n            <app-users-list *ngIf=\"users != undefined\" [users]=\"users\" (reload)=\"loadUsers()\"\r\n                [displayedColumns]=\"['name', 'lastName', 'secondLastName', 'gender', 'documentationId', 'action']\"\r\n                [columnsNames]=\"['Nombre', 'Apellido', '2do Apellido', 'Género', 'DNI/Pasaporte', 'Action']\">\r\n            </app-users-list>\r\n        </div>\r\n        <div *ngIf=\"(isHandset$|async)\">\r\n            <app-users-list *ngIf=\"users != undefined\" [users]=\"users\" (reload)=\"loadUsers()\"\r\n                [displayedColumns]=\"['name', 'documentationId', 'action']\"\r\n                [columnsNames]=\"['Nombre', 'DNI/Pasaporte', 'Action']\">\r\n            </app-users-list>\r\n        </div>\r\n    </mat-tab>\r\n    <mat-tab label=\"Profesional\">\r\n        <div *ngIf=\"!(isHandset$|async)\">\r\n            <app-users-list *ngIf=\"professionals != undefined\" [users]=\"professionals\" (reload)=\"loadUsers()\"\r\n                [displayedColumns]=\"['name', 'lastName', 'secondLastName', 'type', 'gender', 'documentationId', 'noCollegiate', 'action']\"\r\n                [columnsNames]=\"['Nombre', 'Apellido', '2do Apellido', 'Tipo', 'Género', 'DNI/Pasaporte', 'No. Colegiado', 'Action']\">\r\n            </app-users-list>\r\n        </div>\r\n        <div *ngIf=\"(isHandset$|async)\">\r\n            <app-users-list *ngIf=\"professionals != undefined\" [users]=\"professionals\" (reload)=\"loadUsers()\"\r\n                [displayedColumns]=\"['name', 'documentationId', 'type', 'action']\"\r\n                [columnsNames]=\"['Nombre', 'DNI/Pasaporte', 'Tipo', 'Action']\">\r\n            </app-users-list>\r\n        </div>\r\n\r\n    </mat-tab>\r\n    <mat-tab label=\"Paciente\">\r\n        <div *ngIf=\"!(isHandset$|async)\">\r\n            <app-users-list *ngIf=\"patients != undefined\" [users]=\"patients\" (reload)=\"loadUsers()\"\r\n                [displayedColumns]=\"['name', 'lastName', 'secondLastName', 'NHC', 'gender', 'documentationId', 'action']\"\r\n                [columnsNames]=\"['Nombre', 'Apellido', '2do Apellido','NHC', 'Género', 'DNI/Pasaporte', 'Action']\">\r\n            </app-users-list>\r\n        </div>\r\n        <div *ngIf=\"(isHandset$|async)\">\r\n            <app-users-list *ngIf=\"patients != undefined\" [users]=\"patients\" (reload)=\"loadUsers()\"\r\n                [displayedColumns]=\"['name', 'documentationId', 'action']\"\r\n                [columnsNames]=\"['Nombre','DNI/Pasaporte', 'Action']\">\r\n            </app-users-list>\r\n        </div>\r\n    </mat-tab>\r\n</mat-tab-group>\r\n<button mat-raised-button color=\"primary\" class=\"add\" routerLink=\"/user/new\">\r\n    <mat-icon>add</mat-icon>Nuevo Usuario\r\n</button>\r\n<button mat-raised-button color=\"warn\" class=\"delete\" (click)=\"deleteDoctors()\">\r\n    <mat-icon>delete</mat-icon>Eliminar Médicos\r\n</button>\r\n<div class=\"center\" *ngIf=\"users == undefined\">\r\n    <mat-spinner></mat-spinner>\r\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}